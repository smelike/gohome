package main

import "fmt"

// chan T // 一个泛化的通道类型的声明
// 关键字 chan 是代表了通道类型的关键字，而 T 则表示了该通道类型的元素类型

// 通道类型的元素类型，限制了可以经由此类通道传递的元素值得类型。例如，可以声明这样一个别名类型
type IntChan chan int

// 别名 IntChan 代表了元素类型为 int 的通道类型。

// 又例如，可以直接声明一个 chan int 类型的变量：
var intChan chan int

// 在初始化之后，变量 intChan 就可以用来传递 int 类型的元素值了。

// 以上是最简单的通道类型声明方式，如此声明意味着该通道类型是双向的。
// 双向是指既可以向此类通道发送元素值，也可以从它那里接收元素值。

/*
	单向的通道类型
*/
// 声明单向的通道类型，需要用到接收操作符 <-
// chan<- T  // 只能用于发送值得通道类型的泛化表示
// 只能用于发送值的意思，指只能向此类通道发送元素值，而不能从它那里接受元素值。
// 简称发送通道类型。

// 声明只能从中接收元素值的通道类型，形如：// <-chan T // 接收通道类型

/* 初始化通道 */
// 引用类型：切片类型、字典类型、通道类型
// 引用类型的值都需要使用内建函数 make 来初始化，通道类型也不例外。

/* 初始化通道 */
//intChan  = make(chan int, 10)

// 第二个参数值 > 0 的通道，称为缓冲通道。
// 第二个参数 < 0 的通道，称为非缓冲通道。

// = 或 =: 的右边仅能是接收表达式的赋值语句称为接收语句。
// 在其中的接收操作符 <- 右边的不仅仅可以是代表通道的标识符，还可以是任意的表达式。只要这个表达式的结果类型是通道类型即可。可以把这样的表达式称为通道表达式。

// 注意：试图从一个未被初始化的通道值（即值为 nil 的通道）那里接收元素值，会造成当前 goroutine 的永久阻塞。
func main() {
	strChan := make(chan string, 10)
	// elem := <-strChan
	elem, ok := <-strChan // 接收通道值

	if ok {
		fmt.Printf("string channel: %s.\n", elem)
	}
}

// strChan := make(chan string, 10)

// elem := <-strChan
